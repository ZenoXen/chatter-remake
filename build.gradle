import org.openjfx.gradle.JavaFXPlatform

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.osdetector' version '1.7.3'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group = 'org.zh'
version = '0.0.1-SNAPSHOT'

ext {
    platform = getPlatform()
}

java {
    sourceCompatibility = '17'
}

javafx {
    version = "22"
    modules = ['javafx.controls', 'javafx.fxml']
}

mainClassName = 'org.zh.chatter.ChatterRemakeApplication'

configurations {
    osConfiguration
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'io.netty:netty-all:4.1.24.Final'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.3'
    implementation 'cn.hutool:hutool-all:5.8.27'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testfx:testfx-core:4.0.18'
    testImplementation 'org.testfx:testfx-junit5:4.0.18'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

jar {
    manifest {
        attributes 'Main-Class': 'org.zh.chatter.ChatterRemakeApplication' // 设置 JAR 文件的入口类
    }
}

configurations
        .matching(it -> it.name.contains("downloadSources"))
        .configureEach {
            attributes {
                attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
                attribute(OperatingSystemFamily.OPERATING_SYSTEM_ATTRIBUTE, objects.named(OperatingSystemFamily, platform.osFamily))
                attribute(MachineArchitecture.ARCHITECTURE_ATTRIBUTE, objects.named(MachineArchitecture, platform.arch))
            }
        }

def getPlatform() {
    return JavaFXPlatform.detect(osdetector)
}